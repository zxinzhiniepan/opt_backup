/************************************************************************************* Start of junit5 *************************************************************************************/
buildscript {
    repositories {
        mavenCentral()
        // The following is only necessary if you want to use SNAPSHOT releases.
        // maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
    	classpath 'org.akhikhl.gretty:gretty:+'
    }
}
/************************************************************************************* End of junit5 *************************************************************************************/

/*************************************************************************************  gradle 插件 *************************************************************************************/
plugins {
    id 'java'
    id 'war'  
    id 'application'
//    id "com.bmuschko.tomcat" version "2.5"
}
/************************************************************************************* End of plugin *************************************************************************************/


/************************************************************************************* Start of mainClasss *************************************************************************************/
mainClassName='hello.HelloWorld'
/************************************************************************************* End of mainClasss *************************************************************************************/



/************************************************************************************* 仓库 *************************************************************************************/
repositories {
    jcenter()
        mavenCentral()
}
/************************************************************************************* 仓库 *************************************************************************************/


/************************************************************************************* 依赖 *************************************************************************************/
dependencies {
    compile files('src/main/resources/configs')    // 编译时的环境
    runtime files('src/main/resources/configs')    // 运行时的环境

    // 日志记录
    def log4jVersion = '2.11.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4jVersion}"
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4jVersion}"  // 日志记录
    runtime group: 'org.apache.logging.log4j', name: 'log4j-jul', version: "${log4jVersion}"    // junit的日志输出

    // fastjson
    def fastJsonVersion='1.2.44'
    // https://mvnrepository.com/artifact/com.alibaba/fastjson
    compile group: 'com.alibaba', name: 'fastjson', version: "${fastJsonVersion}"
}
// ******************************************************************** Start of web *************************************************************************************
dependencies {
    // web文件上传
    def commonsIOVersion = '2.6'
    compile group: 'commons-io', name: 'commons-io', version: "${commonsIOVersion}" //web文件上传IO
    def commonsFileUploadVersion = '1.3.3'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: "${commonsFileUploadVersion}" 

    //jstl标准库
    def taglibsStandardVersion='1.1.2'
    compile group: 'taglibs', name: 'standard', version: "${taglibsStandardVersion}"

    // servlet
    def jstlVersion='1.2'
    compile group: 'javax.servlet', name: 'jstl', version: "${jstlVersion}"

    // servlet
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0' 
    //providedCompile group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: '2.3.2-b02'
}
// ****************** End of web ************************8

// **************** Start of mybatis ****************
dependencies {
    def mybatisVersion='3.4.5'
    compile group: 'org.mybatis', name: 'mybatis', version: "${mybatisVersion}"
}
// **************** End of mybatis ******************

// **************** Start of database **************************
dependencies {
    // 数据库mysql
    def mysqlVersion = '5.1.44'
    compile "mysql:mysql-connector-java:${mysqlVersion}"     // 连接数据库

    // oracle jdbc driver
    compile group: 'com.github.noraui', name: 'ojdbc8', version: '12.2.0.1'
}
// ****************** End of database ******************************

// ************ Start of hibernate ******************
dependencies {
    def hibernateVersion='5.2.16.Final'
    // Core implementation (includes JPA)
    compile("org.hibernate:hibernate-core:${hibernateVersion}")
    // OSGi integration
    compile("org.hibernate:hibernate-osgi:${hibernateVersion}")
    // Spatial support
    compile("org.hibernate:hibernate-spatial:${hibernateVersion}")
    // Envers audit support
    compile("org.hibernate:hibernate-envers:${hibernateVersion}")
    // HikariCP connection pooling
    compile("org.hibernate:hibernate-hikaricp:${hibernateVersion}")
    // c3p0 connection pooling
    compile("org.hibernate:hibernate-c3p0:${hibernateVersion}")
    // Proxool connection pooling
    compile("org.hibernate:hibernate-proxool:${hibernateVersion}")
    // Infinispan second-level caching
    compile("org.hibernate:hibernate-infinispan:${hibernateVersion}")
    // Ehcache second-level caching
    compile("org.hibernate:hibernate-ehcache:${hibernateVersion}")
}
// ************ End of hibernate **************

// ************ Start of spring**************
dependencies {
    // commos
    compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.2.0'
    compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.5.0'

    // mybatis-spring
    compile group: 'org.mybatis', name: 'mybatis-spring', version: '1.3.1'

    // 切面编程
    compile group: 'aopalliance', name: 'aopalliance', version: '1.0'
    compile group: 'org.aspectj', name: 'aspectjweaver', version: '1.8.13'

    def springVersion='5.0.4.RELEASE'
    compile group: 'org.springframework', name: 'spring-core', version: "${springVersion}"
    compile group: 'org.springframework', name: 'spring-beans', version: "${springVersion}"
    compile group: 'org.springframework', name: 'spring-context', version: "${springVersion}"
    compile group: 'org.springframework', name: 'spring-aop', version: "${springVersion}"
    compile group: 'org.springframework', name: 'spring-expression', version: "${springVersion}"
    compile group: 'org.springframework', name: 'spring-jdbc', version: "${springVersion}"
    compile group: 'org.springframework', name: 'spring-tx', version: "${springVersion}"
    compile group: 'org.springframework', name: 'spring-web', version: "${springVersion}"
    compile group: 'org.springframework', name: 'spring-webmvc', version: "${springVersion}"
}

// ************ End of spring **************

// ********************** Start of struts2 ***************************
dependencies {

    // strust2框架的核心类库
    compile group: 'org.apache.struts', name: 'struts2-core', version: '2.5.16'
    // XWork类库
    compile group: 'org.apache.struts.xwork', name: 'xwork-core', version: '2.3.34'
    // Struts2使用的一种表达式语言类库
    compile group: 'ognl', name: 'ognl', version: '3.1.17'
    // Struts2标签模板使用类库
    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.27-incubating'
    // 字节吗处理
    compile group: 'org.javassist', name: 'javassist', version: '3.22.0-GA'
    // 文件上传
    // javaIO扩展
    // 数据类型工具
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
}
// ********************** End of struts2 ****************************

/************************************************************************************* End 依赖 *************************************************************************************/

/************************************************************************************* Start of Juit 配置 *************************************************************************************/
apply plugin: 'org.junit.platform.gradle.plugin'
junitPlatform {
    platformVersion '1.0.2' // optional, defaults to plugin version
    logManager 'org.apache.logging.log4j.jul.LogManager'
    reportsDir file('build/test-results/junit-platform') // this is the default
    // enableStandardTestTask true
    // selectors (optional)
    // filters (optional)
}
dependencies {
    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.2")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.2")
}
/************************************************************************************* End of Junit 配置 *************************************************************************************/

// 打包
jar{
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest{
        attributes 'Main-Class':'hello.HelloWorld'
    }
}

//// 将xml文件加入Resources文件夹中
//processResources{
//    // 打包源码下的资源文件
//    from('src/main/java'){
//        include '**/*.xml'
//    }
//}

// 控制台输入
run{
    standardInput = System.in
}

/************************************************************************************* Servlet容器设置 *************************************************************************************/
/*
dependencies {
    // tomcat容器
    def tomcatVersion = '9.0.1'
        tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
               "org.apache.tomcat.embed:tomcat-embed-logging-juli:9.0.0.M6",
               "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
}

//tomcatRun.configFile = file("context.xml")
tomcatRun.configFile = file("src/main/webapp/META-INF/context.xml")
tomcatRun.outputFile = file("logs/tomcat/tomcat.log")

tomcat{
    //    tomcatRun.webDefaultXml = file("src/main/webapp/WEB-INF/web.xml")
    httpProtocol = 'org.apache.coyote.http11.Http11Nio2Protocol'
        ajpProtocol  = 'org.apache.coyote.ajp.AjpNio2Protocol'
        httpPort = 8090
        httpsPort = 8091
        ajpPort = 8095
        stopPort = 8100

        users{
            user{
                username = 'zhanghua'
                    password = '123456'
                    roles = ['developers', 'admin']
            }
        }
}
*/

// gretty
//apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'
apply plugin: 'org.akhikhl.gretty'
gretty {
    servletContainer 'tomcat8'
    httpPort 8090
    logDir "./logs/gretty"
        //contextPath = '/MyWebApp'
        // ... many more properties
}
/************************************************************************************* Servlet容器设置 *************************************************************************************/


/************************************************ task */
/************************************************************************************* 创建java web项目目录结构 *************************************************************************************/
// 创建java项目src目录
task createJavaProject {
    doLast{
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs()}
        println(1);
    }
}

// 创建javaweb项目目录
task createWebProject(dependsOn: 'createJavaProject') {
    doLast{
        def webAppDir = file("$webAppDirName")
            webAppDir.mkdirs()
            println(2);
    }
}
// 初始化javaweb项目目录
task initDir(type:Exec){
    dependsOn 'createWebProject'
        commandLine 'initWeb'
        doLast{
            println(3);
        }
}

// 添加index.jsp文件
task initWebProject(type:Exec) {
    dependsOn 'initDir'
        commandLine 'touch', 'src/main/webapp/index.jsp'
        doLast{
            println(4);
        }
}
/************************************************************************************* 创建java web项目目录结构 *************************************************************************************/

/************************************************************************************* 发布项目到tomcat *************************************************************************************/
// 软连接war文件到tomcat
task webWarInit(type:Exec){
    doFirst{
        print("${rootProject.name}")
            delete "/opt/tomcat/current-tomcat/webapps/${rootProject.name}.war"
    }
    commandLine 'ln', "-s", "${buildDir.path}/libs/${rootProject.name}.war", "/opt/tomcat/current-tomcat/webapps/${rootProject.name}.war"
}

task releaseWebWar(type:Exec){
    //commandLine 'echo', "${buildDir.path}" //build 目录
    commandLine 'createsite', "d", "${rootProject.name}"
        doLast{
            print(2);
        }
}

//执行顺序与task之间的依赖关系
releaseWebWar.dependsOn build
releaseWebWar.dependsOn webWarInit
webWarInit.mustRunAfter build
releaseWebWar.mustRunAfter webWarInit
/************************************************************************************* 发布项目到tomcat *************************************************************************************/
